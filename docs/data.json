{
    "project": {
        "name": "Backbone.ViewMaster",
        "description": "Few tested opinions on how to handle deeply nested views in Backbone.js focusing on encapsulation and reusability.",
        "version": "1.0.0",
        "url": "https://github.com/epeli/backbone.viewmaster",
        "themedir": ".yuidoc_theme"
    },
    "files": {
        "lib/backbone.viewmaster.js": {
            "name": "lib/backbone.viewmaster.js",
            "modules": {},
            "classes": {
                "Backbone.ViewMaster": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Backbone.ViewMaster": {
            "name": "Backbone.ViewMaster",
            "shortname": "Backbone.ViewMaster",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/backbone.viewmaster.js",
            "line": 11,
            "description": "Few tested opinions on how to handle deeply nested views in Backbone.js focusing on encapsulation and reusability.\n\n<https://github.com/epeli/backbone.viewmaster>",
            "extends": "Backbone.View"
        }
    },
    "classitems": [
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 25,
            "description": "Boolean indicating whether this view has been rendered at least once.\nSet by the `render` method and used by the parent view.",
            "itemtype": "property",
            "name": "rendered",
            "type": "Boolean",
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 43,
            "description": "Bind a callback function to a given Backbone event emitter for the\nlifetime of the view.",
            "itemtype": "method",
            "name": "bindTo",
            "params": [
                {
                    "name": "emitter",
                    "description": "Any Backbone events object",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback function or view method as string",
                    "type": "Function/String"
                },
                {
                    "name": "context",
                    "description": "Callback context. Defaults to view instance",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "binding",
                "type": "Object"
            },
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 75,
            "description": "Unbind all event callbacks this view has bound with `bindTo`.",
            "itemtype": "method",
            "name": "unbindAll",
            "return": {
                "description": "this",
                "type": "Object"
            },
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 88,
            "description": "Unbind single `binding` bound with `bindTo`.",
            "itemtype": "method",
            "name": "unbindFrom",
            "params": [
                {
                    "name": "binding",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 99,
            "description": "TODO: doc me",
            "itemtype": "property",
            "name": "elements",
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 107,
            "description": "Template function. User must override this!",
            "itemtype": "method",
            "name": "template",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "rendered template",
                "type": "String / DOM object"
            },
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 118,
            "description": "Returns the context object for the `template` method.\n\nDefault: `this.model.toJSON()` or an empty object if view has no model.",
            "itemtype": "method",
            "name": "context",
            "return": {
                "description": "context",
                "type": "Object"
            },
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 132,
            "description": "Render this view with `this.template(this.context())` and child views\nwith `this.renderViews(options)`.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "force",
                            "description": "force rerendering of child views",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "this",
                "type": "Object"
            },
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 168,
            "description": "Render child views only.",
            "itemtype": "method",
            "name": "renderViews",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "force",
                            "description": "force rerendering of child views",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "this",
                "type": "Object"
            },
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 194,
            "description": "Detach view from its parent but keep it in DOM.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_removeParent",
            "return": {
                "description": "this",
                "type": "Object"
            },
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 220,
            "description": "Prepare views to be nested in this view. Set up event bubbling and\nremove possible previous parent.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_prepareViews",
            "params": [
                {
                    "name": "view(s)",
                    "description": "View object or an array of view objects",
                    "type": "Object/Array"
                }
            ],
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 251,
            "description": "Same as original Backbone trigger, but the events are bubbled up to the\nparent views unless object with `parent: false` or `parent: null` is\npassed with the first event object.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": "Event name",
                    "type": "String"
                },
                {
                    "name": "object*",
                    "description": "Zero or more objects to be passed along with\nthe event",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "this",
                "type": "Object"
            },
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 264,
            "description": "Iterate each child view.",
            "itemtype": "method",
            "name": "eachView",
            "params": [
                {
                    "name": "iterator",
                    "description": "",
                    "type": "Function",
                    "props": [
                        {
                            "name": "selector",
                            "description": "CSS selector for the view container",
                            "type": "String"
                        },
                        {
                            "name": "view",
                            "description": "The view object",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "this",
                "type": "Object"
            },
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 289,
            "description": "Set a view or an array of views to a given view container.\n\nIf previous set of views is replaced by a new set — the views not\npresent in the new set will be discarded with `remove` on the next\n`renderViews` call unless detached with `detach` method.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "setView",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector for the view container",
                    "type": "String"
                },
                {
                    "name": "view(s)",
                    "description": "View object or an array of view objects",
                    "type": "Object/Array"
                }
            ],
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 316,
            "description": "Insert view or array of views to specific index in the view array.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "insertView",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector for the view container",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "Index to insert view(s)",
                    "type": "Number"
                },
                {
                    "name": "view(s)",
                    "description": "View object or an array of view objects",
                    "type": "Object/Array"
                }
            ],
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 336,
            "description": "Append a view or an array of views to a given view container.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "appendView",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector for the view container",
                    "type": "String"
                },
                {
                    "name": "view(s)",
                    "description": "View object or an array of view objects",
                    "type": "Object/Array"
                }
            ],
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 352,
            "description": "Prepend a view or an array of views to a given view container.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "prependView",
            "params": [
                {
                    "name": "selector",
                    "description": "CSS selector for the view container",
                    "type": "String"
                },
                {
                    "name": "view(s)",
                    "description": "View object or an array of view objects",
                    "type": "Object/Array"
                }
            ],
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 368,
            "description": "Get views for given container",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getViews",
            "params": [
                {
                    "name": "selector",
                    "description": "container CSS selector",
                    "type": "String"
                }
            ],
            "return": {
                "description": "views",
                "type": "Array"
            },
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 380,
            "description": "Detaches view from its parent and DOM.",
            "itemtype": "method",
            "name": "detach",
            "return": {
                "description": "this",
                "type": "Object"
            },
            "class": "Backbone.ViewMaster"
        },
        {
            "file": "lib/backbone.viewmaster.js",
            "line": 393,
            "description": "Discard this view and all its children for good. Clears all events bound\nfor the view. Use `detach` instead if you need to use the view again\nsome time later.",
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "this",
                "type": "Object"
            },
            "class": "Backbone.ViewMaster"
        }
    ],
    "warnings": []
}